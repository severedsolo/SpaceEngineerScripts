//places to store lists of Airlocks and Doors 
List<IMyTerminalBlock> airvents = new List<IMyTerminalBlock>(); 
List<IMyTerminalBlock> doors = new List<IMyTerminalBlock>(); 
List<IMyTerminalBlock> sensors = new List<IMyTerminalBlock>(); 
 
void Main() 
{   //find airlock vents and their current air level. 
    airvents.Clear(); 
    IMyAirVent airlock = GridTerminalSystem.GetBlockWithName("Airlock") as IMyAirVent; //find airlock vents 
    float OxyLevel = airlock.GetOxygenLevel(); //get level of air in the airlock 
 
    //find the outer and inner doors 
    doors.Clear(); 
    IMyDoor outerdoor = GridTerminalSystem.GetBlockWithName("Outer Door") as IMyDoor; //outer door (space) 
    IMyDoor innerdoor = GridTerminalSystem.GetBlockWithName("Inner Door") as IMyDoor; //inner door (cabin) 
    IMyDoor innerdoor1 = GridTerminalSystem.GetBlockWithName("Inner Door 1") as IMyDoor; //inner door (cabin) 
    
    //find sensors   
    sensors.Clear();  
    IMySensorBlock outsensor = GridTerminalSystem.GetBlockWithName("Outer Door Sensor") as IMySensorBlock; //outer door (space) 
    IMySensorBlock insensor = GridTerminalSystem.GetBlockWithName("Inner Door Sensor") as IMySensorBlock; //inner door
    IMySensorBlock insensor1 = GridTerminalSystem.GetBlockWithName("Inner Door Sensor 2") as IMySensorBlock; //inner door

    //is the airlock pressurising? (counter intuitive - pressure = true means it's depressurising.) 
    bool pressure = airlock.IsDepressurizing;  
    // are the doors open?
    bool innerstatus = innerdoor.Open && innerdoor1.Open;
    bool outerstatus = outerdoor.Open;
     
    //Airlock Logic 
    //First: if the airlock is set to be pressurised, close the outer door. 
    if (pressure == false) 
    {  
    outerdoor.ApplyAction("Open_Off"); 
    } 
    // then turn the door off.
    if (pressure == false && outerstatus == false)
    {
    outsensor.ApplyAction("OnOff_Off");
    }
    //make sure that cabin doors are secured if depressurisation has started. 
    if (pressure == true) 
    { 
    innerdoor.ApplyAction("Open_Off"); 
    innerdoor1.ApplyAction("Open_Off"); 
    } 
	// then turn them off
    if (pressure == true && innerstatus == false)
    { 
    insensor.ApplyAction("OnOff_Off");
    insensor1.ApplyAction("OnOff_Off");
    }
	//if pressurisation has completed, turn the inner doors on.
    if (pressure == false && OxyLevel == 1) 
    {  
    insensor.ApplyAction("OnOff_On"); 
    insensor1.ApplyAction("OnOff_On"); 
    } 
	if depressurisation is complete, turn the outer doors on.
    if (pressure  == true && OxyLevel == 0) 
{
    outsensor.ApplyAction("OnOff_On"); 
}
}